WolframModelObjectProperties[
  x_WolframModelEvolutionObject] := {RulePlot[
   ResourceFunction["WolframModel"][x["Rules"]]], 
  x[0], 
  x["FinalState"];,
   ListLinePlot[x["VertexCountList"], 
   Table[If[(E^i) < x["VertexCountList"][[-1]], E^i, Nothing[]], {i, 
     0, 10}]],
   ListLinePlot[x["EdgeCountList"], 
   Table[If[(E^i) < x["EdgeCountList"][[-1]], E^i, Nothing[]], {i, 0, 
     10}]], 
   ListLinePlot[
   Map[GraphDiameter, 
    Map[UndirectedGraph, 
     Map[ResourceFunction["HypergraphToGraph"], x["StatesList"]]]]], 
  ResourceFunction["ConnectedHypergraphQ"][x["FinalState"]]}

WolframModelObjectProperties :: usage = 
  "WolframModelObjectProperties takes a WolframModelEvolutionObject \
as an input. It gives the list of: its underlying Rules, Initial \
State, Final State, Line Plot of its vertex and edge counts at each \
stage, plot of diameter at all states, and whether the hypergraph is \
final connected or not.";

WolframModelSignGrowthCon[x_] := 
 Table[If[ResourceFunction["ConnectedHypergraphQ"]
     [ResourceFunction["WolframModel"][i, Keys[i], 3, "FinalState"]] && 
    Length@
      ResourceFunction["WolframModel"][i, Keys[i], 3, 
       "EdgeCountList"] > 2, 
   ResourceFunction["WolframModel"][i, Keys[i], 10], Nothing],
  {i, ResourceFunction["EnumerateWolframModelRules"][x]}]

WolframModelSignGrowthCon::usage = 
  "WolframModelSignGrowthCon takes in a signature [x] and returns the \
output of WolframModel[x, Keys[x], 10] minus the rules for which the \
hypergraph at 3rd step is disconnected or does not grow after 3 \
steps.";

WolframModelLinearFilter[x_WolframModelEvolutionObject] := 
 Switch[FindLinearRecurrence /@ {x["VertexCountList"], 
    x["EdgeCountList"]},
  {{2, -1}, {2, -1}}, Nothing[],
  {{1}, {2, -1}}, Nothing[], 
  {{2, -1}, {1}}, Nothing[],
  {{1}, {1}}, Nothing[],
   _, x]

WolframModelLinearFilter::usage = 
  "WolframModelLinearFilter takes in a WolframModelEvolutionObject \
and checks if the growth rate of the nodes or hyperedges of the \
WolframModelEvolutionObject are completely linear.";

WolframModelInterestingRules[x_] := 
 Column[Map[WolframModelObjectProperties, 
   Map[WolframModelPowerFilter, 
    Map[WolframModelLinearFilter, WolframModelSignGrowthCon[x]]]]]
    
WolframModelInterestingRules::usage = 
  "WolframModelInterestingRules takes in a signature as an input. It \
then returns the output of WolframModelObjectProperties for the rules \
which give connected, non-terminating, non-linear growth, and \
non-power growth models.";
